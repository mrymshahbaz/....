# -*- coding: utf-8 -*-
"""
Created on Sat Nov 23 09:29:00 2024

@author: persian rayaneh
"""
برای حل این مسئله، می‌توانیم از الگوریتم معروف "مسئله یوزفوس" استفاده کنیم. در این مسئله، یک دایره از افراد وجود دارد و با گام‌های مشخص، افراد از دایره خارج می‌شوند تا تنها یک نفر باقی بماند. کد زیر این مسئله را با توجه به شرایط ذکر شده پیاده‌سازی می‌کند:

def josephus(n, k):
    """محاسبه‌ی موقعیت آخرین نفر باقی‌مانده"""
    if n == 1:
        return 0  # تنها یک نفر که باقی مانده است
    else:
        # بازگشت به حل مسئله با n-1 نفر
        return (josephus(n - 1, k) + k) % n

def main():
    import sys
    input = sys.stdin.read
    data = input().splitlines()
    
    # تعداد آزمون ها
    x = int(data[0])  
    results = []

    for i in range(1, x + 1):
        line = data[i].strip() 
        if line == "*":
            break

        # اطلاعات آزمایش
        numbers = list(map(int, line.split()))
        n = 100  # مقدار پیش‌فرض n
        k = 2    # مقدار پیش‌فرض k

        if len(numbers) >= 1:
            n = numbers[0]  # اگر n داده شده باشد از آن استفاده کن
        if len(numbers) >= 2:
            k = numbers[1]  # اگر k داده شده باشد از آن استفاده کن

        # محاسبه‌ی شخصیت آزاد شده
        safe_position = josephus(n, k) + 1  # +1 برای نمایش موقعیت در نمای نهایی
        results.append(safe_position)  # ذخیره نتیجه در لیست

    # چاپ نتایج
    for result in results:
        print(result)

if __name__ == "__main__":
    main()


### توضیح هر خط:

1. def josephus(n, k):: تعریف تابعی که موقعیت آخرین نفر باقی‌مانده را محاسبه می‌کند.
2. if n == 1:: اگر تنها یک نفر باقی مانده باشد، موقعیت آن 0 است.
3. return (josephus(n - 1, k) + k) % n: محاسبه موقعیت با استفاده از بازگشت. با کسر یک نفر و اضافه کردن گام k موقعیت جدید محاسبه می‌شود.
4. def main():: تعریف تابع اصلی که ورودی‌ها را مدیریت می‌کند.
5. import sys: وارد کردن کتابخانه sys برای خواندن ورودی.
6. input = sys.stdin.read: خواندن کل ورودی به یک رشته.
7. data = input().splitlines(): تقسیم ورودی به خطوط جداگانه.
8. x = int(data[0]): تعداد آزمون‌ها را از خط اول می‌خوانیم.
9. results = []: تعریف لیستی برای ذخیره نتایج.
10. for i in range(1, x + 1):: حلقه‌ای برای پردازش هر آزمایش.
11. line = data[i].strip(): خواندن و تمیز کردن خط مربوط به آزمایش.
12. if line == "*": break: در صورت برخورد به علامت '*' حلقه را متوقف کن.
13. numbers = list(map(int, line.split())): تبدیل مقادیر خط به لیست اعداد صحیح.
14. n = 100: مقدار پیش‌فرض n.
15. k = 2: مقدار پیش‌فرض k.
16. if len(numbers) >= 1:: اگر حداقل یک عدد وجود دارد، از آن استفاده کن.
17. if len(numbers) >= 2:: اگر دو عدد وجود دارد، از آن استفاده کن.
18. safe_position = josephus(n, k) + 1: محاسبه‌ی موقعیت نفر آزاد شده (با افزودن 1 برای تبدیل به موقعیت انسانی).
19. results.append(safe_position): اضافه کردن نتیجه به لیست نتایج.
20. for result in results:: حلقه‌ای برای چاپ نتایج.
21. print(result): چاپ هر نتیجه در یک خط جداگانه.
22. if __name__ == "__main__": main(): اجرا کردن تابع main اگر این اسکریپت به صورت مستقیم اجرا شود.
